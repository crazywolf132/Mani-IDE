CodeMirror.defineSimpleMode("mani", {
  start: [

    {regex: /"(?:[^\\]|\\.)*?"/,
     token: "string"},

    /*
    {regex: /(function|on)(\s+)([a-z$][\w$]*)/,
     token: ["keyword", null, "variable-2"]},
    */

    {regex: /(?:function|public|private|final|static|package|extends|super|global|follow|return|if|for|loop|while|else|do|this|vial|group|import|class|method|void|constructor|new|on|command)\b/,
     token: "keyword"},

    {regex: /true|false|null|undefined/,
     token: "atom"},

    {regex: /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,
     token: "number"},

    {regex: /\/\/.*/,
     token: "comment"},

    {regex: /\/(?:[^\\]|\\.)*?\//,
     token: "variable-3"},

    {regex: /\/\*/,
     token: "comment", next: "comment"},

    {regex: /[-+\/*=<>!]+/,
     token: "operator"},

    {regex: /[\{\[\(]/, indent: true},
    {regex: /[\}\]\)]/, dedent: true},

    {regex: /[a-z$][\w$]*/,
     token: "variable"},

    {regex: /<</,
     token: "meta", mode: {spec: "xml", end: />>/}}
  ],

  comment: [
    {regex: /.*?\*\//,
     token: "comment", next: "start"},

    {regex: /.*/,
     token: "comment"}
  ],

  meta: {
    dontIndentStates: ["comment"],
    lineComment: "//"
  }

});
